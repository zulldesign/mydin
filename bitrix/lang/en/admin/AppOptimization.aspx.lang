<?xml version="1.0" encoding="utf-8"?>
<resources>
	<data name="PageTitle"><![CDATA[Website Performance Optimization]]></data>
	<data name="TabText.Main"><![CDATA[Main Parameters]]></data>
	<data name="TabTitle.Main"><![CDATA[Dynamic Compilation And Cache Parameters]]></data>
	<data name="TabText.ComponentCaching"><![CDATA[Component Caching]]></data>
	<data name="TabTitle.ComponentCaching"><![CDATA[Component caching parameters]]></data>
	<data name="TabText.ManagedCaching"><![CDATA[Managed Cache]]></data>
	<data name="TabTitle.ManagedCaching"><![CDATA[Managed Cache Parameters]]></data>
	<data name="Header.MemorySettings"><![CDATA[Memory Parameters]]></data>
	<data name="Header.DynamicCompilationSettings"><![CDATA[Dynamic Compilation Settings]]></data>
	<data name="Intro.DynamicCompilationSettings"><![CDATA[The global web.config file loads assemblies not required for dynamic compilation of the Bitrix .NET Forge CMS code. You can disable assemblies that are not required by your code to decrease memory consumption.]]></data>
	<data name="FieldName.EnableMemoryCollection"><![CDATA[Clear Cache On Low Memory (recommended)]]></data>
	<data name="FieldName.PrivateBytesLimit"><![CDATA[The maximum size of the application private memory in bytes which, when exceeded, will entail deleting expired cache elements attempting to free more memory]]></data>
	<data name="FieldName.PrivateBytesPollTime"><![CDATA[Time between consecutive requests for the size of application private memory, sec.]]></data>
	<data name="FieldName.CompilationEnableDebug"><![CDATA[Debug Mode]]></data>
	<data name="FieldName.CompilationEnableBatch"><![CDATA[Batch Compilation (recommended)]]></data>
	<data name="Legend.EnableMemoryCollection"><![CDATA[Clearing the cache on low memory condition (scavenging) causes unused and low priority elements to be deleted. Disabling it may result in application memory overflow (System.OutOfMemoryException).]]></data>
	<data name="Legend.PrivateBytesLimit"><![CDATA[Defines the maximum size of the process private memory. If the private memory size approaches the maximum, the cache system attempts to perform even more aggressive cache cleanup strategy. The default value is 0.]]></data>
	<data name="Legend.PrivateBytesPollTime"><![CDATA[Defines the time interval between consecutive requests for the size of the application private memory. This operation is quite time consuming.]]></data>
	<data name="Legend.CompilationEnableDebug"><![CDATA[The debug builds are far worse in performance. You are recommended to use these for debugging purpose only.]]></data>
	<data name="Message.PrivateBytesLimitIsNotNumber"><![CDATA[The maximum private memory size must be a positive integer.]]></data>
	<data name="Message.PrivateBytesPollTimeIsNotNumber"><![CDATA[The private memory request time interval must be a positive integer.]]></data>
	<data name="ErrorMessage.PrivateBytesLimitParsing"><![CDATA[Error parsing the maximum private memory value.]]></data>
	<data name="ErrorMessage.PrivateBytesPollTimeParsing"><![CDATA[Error parsing the private memory request time interval.]]></data>
	<data name="Assembly.EnterpriseServices"><![CDATA[COM+ Support (System.EnterpriseServices)]]></data>
	<data name="Assembly.ServiceModel"><![CDATA[Windows Communication Foundation (WCF) Support (System.ServiceModel)]]></data>
	<data name="Assembly.ServiceModelWeb"><![CDATA[HTTP Context Support For Windows Communication Foundation (WCF) (System.ServiceModel.Web)]]></data>
	<data name="Assembly.IdentityModel"><![CDATA[Windows Communication Foundation (WCF) Authentication Support (System.IdentityModel)]]></data>
	<data name="Assembly.WebMobile"><![CDATA[Mobile Web Application Support (System.Web.Mobile)]]></data>
	<data name="Assembly.WorkflowServices"><![CDATA[Workflow Process Support (System.WorkflowServices)]]></data>
	<data name="Intro.BackupRecommendation"><![CDATA[<p>It is advised to create a backup copy of <a href="FileManDownload.ashx?path=~/web.config">web.config</a> from the site root.</p>]]></data>
	<data name="Legend.CompilationEnableBatch"><![CDATA[In batch compile mode, ASP.NET tends to pack as many pages in a compiled assembly as possible so that an application requires less assemblies at runtime. This is applicable only to folders containing aspx and ascx files. Note that Windows imposes certain restriction on the number of simultaneously loaded libraries. When an application exceeds the limit, the performance degrades considerably. In particular, it is important for large systems. However, batch compilation requires more server power and increases the response time of the first page in a catalog. To fix this issue, you can use pre-batch compilation. Just before a catalog page is requested, the author initiates a request to any page thus initiating the batch compile process and pushing ASP.NET to create and cache all the pages in a catalog.]]></data>
	<data name="MessageText.ComponentAutoCachingEnabled"><![CDATA[Component auto cache is enabled.]]></data>
	<data name="MessageText.ComponentAutoCachingNotEnabled"><![CDATA[Component auto cache is disabled.]]></data>
	<data name="ButtomText.EnableComponentAutoCaching"><![CDATA[Enable Auto Cache]]></data>
	<data name="ButtomText.DisableComponentAutoCaching"><![CDATA[Disable Auto Cache]]></data>
	<data name="Html.ComponentCachingIntro"><![CDATA[<table cellspacing="0" cellpadding="5" border="0" width="100%">
		<tbody>
			<tr>
				<td valign="top">Auto cache can boost your website performance many times over!</td>
			</tr>
			<tr>
				<td valign="top"><br/>Notice that with auto cache on, the components update information according to their preferences.</td>
			</tr>
			<tr>
				<td valign="top"><br/>Use one of the following methods to update information cached and (consequently) displayed by the components.</td>
			</tr>
	</tbody>
</table>
<table cellspacing="0" cellpadding="5" border="0" width="100%">
	<tbody>
		<tr>
			<td align="center" valign="top">&nbsp;</td>
		</tr>
		<tr>
			<td valign="top">1. Open a required page and update it by clicking "Refresh Cache" on the Control Panel toolbar.<br>
			<img height="131" width="269" vspace="5" src="img/caching/page_cache.png"/></td>
		</tr>
		<tr>
			<td align="center" valign="top">&nbsp;</td>
		</tr>
		<tr>
			<td valign="top">2. When in Site Edit mode, use the cache clear buttons in the component context toolbar.<br>
			<img height="162" width="719" vspace="5" src="img/caching/comp_cache.png"/></td>
		</tr>
		<tr>
			<td valign="top">&nbsp;</td>
		</tr>
		<tr>
			<td valign="top">3. Alternatively, you can disable caching in the properties bar of the required components. <br>
			<img height="105" width="682" vspace="5" src="img/caching/spisok.gif"/></td>
		</tr>
	</tbody>
</table>
<br/>
<p>
Notice the following rules that apply when activate auto caching.<br/><br/>

The components whose cache type is set to <i>"Auto"</i> will use caching.<br>
<br/>
The components whose cache type is <i>"Use Cache"</i> and the cache lifetime value is not zero, always use caching.<br>
<br/>
The components whose cache type is <i>"Don't Use Cache"</i> or the cache lifetime value is zero, are never cached.</p>]]></data>
	<data name="MessageText.ManagedCachingEnabled"><![CDATA[Managed cache is enabled.]]></data>
	<data name="MessageText.ManagedCachingNotEnabled"><![CDATA[Managed cache is disabled.]]></data>
	<data name="ButtomText.EnableManagedCaching"><![CDATA[Enable Managed Cache (recommended)]]></data>
	<data name="ButtomText.DisableManagedCaching"><![CDATA[Disable Managed Cache (not recommended)]]></data>
	<data name="Html.ManagedCachingIntro"><![CDATA[The managed cache technology updates the cache contents automatically whenever data linked to it changes. For example, when this feature is enabled, you do not have to update the component cache manually after you add some news or products: these changes are available to the site visitors immediately.
<br/><br/>
<span style="color: grey;">Note: not all components may support managed caching.</span>
	]]></data>
</resources>